/*02.문자열 타입
문자열 타입은 텍스트 데이터를 나타내는데 사용한다.
문자열은 작은 따옴표(''),큰따옴표(""),또는 백틱(``)으로 텍스틀 감싼다.
자바는 문자열을 객체로 표현하지만 자바스크립트의 문자열은 원시 타입이며 변경 불가능한 값이다.*/

var string;
string = 'JavaScript'; // 작은 따옴표
string = "JavaScript"; // 큰 따옴표
string = 'JavaScript'; // 백틱(ES6)

string = '작은 따옴표로 감싼 문자열 내의' "큰 따옴표"는 문자열로 인식';
string = "큰 따옴표로 감싼 문자열 내의 '작은 따옴표'는 문자열로 인식";
 // var란?
 키워드느 변수를 선언할떄 사용된다.
 var로 선언된 변수는 다음과 같은 특징을 가진다
 1. 함수 스코프(Function Scope):
 . 'var'로 선언된 변수는 함수 스코프를가진다. 이는 변수가 선언된 함수 내부에서만 유효하다는 의미이다.
 블록스크포('if','for' 등의 블록 내부)에서는 영향을 받지 않습니다.
. 예를 들어 아래의 코드에서 'var'로 선언된 'i'는 for 루프 바깥에서도 접근 가능하다.
function example(){
    for (var i = 0; i < 10; i++){
        console.log(i);
    }
    console.log(i); // 여전히 접근 가능, 10 출력
}
example();
2. 변수 호이스팅
.`var`로 선언된 변수는 호이스팅되며, 이는 변수가 선언되기 전에도 접근이 가능하다는 의미입니다.다만 선언되기 전에는
'undefined'값을 가진다.
. 예를 들어, 아래의 코드는 정상적으로 동작합니다:
console.log(myVar); // undefined 출력
var myVar =5;
console.log(myVar); // 5 출력

3. 중복 선언 허용:
.동일한 스코프 내어서 같은 이름의 변수를 중복해서 선언할 수 있습니다. 이 경우, 나중에 선언된 변수가 이전의 
값을 덮어씁니다.
.예를 들어:
var myVar =5;
var myVar =10;
console.log(myVar); // 10 출력

`var`이외에도 ES6(ECMAScript2015)부터는 `let`과 `const`키워드가 도입되었으며, 이들은 블록 스코프를 가지며
호이스팅 동작이 다르다. 일반적으로는 더 안전하고 예측하능한 코드를 작성하기 위해 'let'과 
'const'를 사용하는 것이 권장된다.

/*
템플릿 리터럴
ES6부터 도입 된 멀티라인 문자열, 표현식 삽입 등의 편리한 문자열 처리 기능을 제공하는 문자열 표기법이다.
이 때는 작은 따옴표, 큰따옴표 대신 백틱을 사용해 표현한다.*/

// 일반 문자열 내에서는 줄바꿈이 허용되지 않는다.
var str= '안녕하세요.
반갑습니다.';
// 이스케이프 시퀀스를 사용해야 한다.
var str ='안녕하세요.\n반갑습니다.';

//백틱을 사용하면 줄바꿈이 허용되고 모든 공백이 있는 그대로 적용 된다.
var multiline = `안녕하세요.
반갑습니다.`;
console.log(multiline);

var lastName = `홍`;
var firstName = `길동`;

// 문자열은 문자열 연산자 +를 사용해 연결할 수 있다.
console.log('제 이름은' + lastName + firstName + '입니다.');

//표현식 삽입을 이용하면 문자열 연산자보다 가독성 좋고 간편하게 문자열을 조합할 수 있다.
console.log('제 이름은 $(lastName}$(firstName}입니다.');

//표현식 삽입은 반드시 백틱 내에서 사용해야 한다.
//일반 문자열에서의 표현식 삽입은 문자열로 취급된다.
console.log('제 이름은 ${lastName}${firstName}입니다.');
